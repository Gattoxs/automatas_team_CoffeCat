#include<stdio.h>
#include<windows.h>
#include"Pilas.h"
#include"Tokens.h"
#include"Estructura.h"
#include"Ordenar.h"
//_______________________	P	a	r	e	a ________________________________________________//

int pareas (int ntoken){
	if (ntoken==k->token){
		k=k->sig;
		return 1;
		
	}else{
		printf("Error en la linea [%d] cerca de %s\n", k->renglon, k->dato);
		//if(k-> token!=111)
		//	printf("------     token= %d \n",k->token);
	}
	return 0;
}


//______________________ Imprimir Variables PHP____________________//
void imprimirVar(tipo *lista){
	tipo p = *lista;
	while(p != NULL){
		if(p->token == 309)
				printf("[%s%s, %d, %d]\n", p->dato,p->sig->dato, p->renglon, p->token);
			else {
				printf("");
				goto error;
			}
		p=p->sig;
	}
	if(0){
	error:
	system("cls");
	printf("(!)Se encontro un error, lo cual llevo a que el programa cerrara (!)\nLinea [%d], despues de %s", p->renglon, p->dato);
}
}

main(){
	
	tipo lista=NULL;
	FILE *Archivo, *Reservadas;
	char res[36][20] = {"?", "^", "'", "=", ">", "<", "(", ")",";", ":", ",", "[", "]", "{", "}", "+", "-", "*", "/", "!", "||", "&&", "!=", "==", ">=", "<=", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
	char subs[100];
	subs[0] = 0;
	int i=0;
	tipopila salida = NULL, aux = NULL;
	char par[5][5];
	
	par[0][0] = 42; par[0][1] = 0; // * 
	par[1][0] = 47; par[1][1] = 0; // /
	par[2][0] = 40; par[2][1] = 0; // (
	par[3][0] = 41; par[3][1] = 0; // )
	
	Reservadas = fopen("palabras reservadas.txt", "r");
	Archivo = fopen("../expmath.php", "r");
	guardar(&lista, Archivo, res);
	k = lista;
				
		while(k != NULL){
			
			switch(k->token){

				case 309:      //Al momento de encontrar una variable '$'	
			        k=k->sig;  //Avanzamos al nombre 
					
					//$var;
					if(pareas(310) && pareas(9)){ k=k->ant; goto A;} k=k->ant;
					system("cls");
					
					//$var = "String" || $var = ExpMath;
					if(pareas(310) && pareas(3)){ 
			 
						if(pareas(34)){ //$var = "String"
							if(pareas(308) && pareas(34) && pareas(9))
								goto A;
							else
								goto B;
						}
						system("cls");	
								
						//ExpMath	POSTFIJA
						while(k->token != 9){ 					
							
							if(k->token == 306){  		    //Si es # 
								meterpila(&salida, k->dato);//Lo metemos a la salida	
							}
							else							//De lo contrario
								if(k->token == 14 || k->token == 15 || k->token == 16 || k->token == 17 || k->token == 4 || k->token == 5){//Si es op(+ - / *)	
									
									
									switch(k->token){
										case 14:						// Suma 
										case 15:						// Resta
											meterpila(&aux, k->dato);	           // Lo metemos a la pila auxiliar
											break;	
										case 16:					   // Multiplicacion
										case 17:		      		   // te amo gatito <3.<3 Divicion
									 
											if(aux == NULL){					   // Si la pila aux esta vacia
												meterpila(&aux, k->dato);		   // Lo metemos directo a la pila
												
											}else{								   // De lo contrario
															
 												while(aux != NULL){				   // Sacamos los valores de la pila aux y los metemos a la salida hasta que encuentre un * / ( o este vacia aux 
												 if(strcmp(aux->info, par[0]) == 0 || strcmp(aux->info, par[1]) == 0 || strcmp(aux->info, par[2]) == 0) //Si es '*' '/' '('
												 {goto next;}               	   // Al encontrar un * / ( en la pila saldra del ciclo y se ira a la etiqueta next	
												
													strcpy(subs, sacarpila(&aux)); // Le asignamos a la variable 'subs' el valor primer valor de la pila aux y lo borramos de la pila
													meterpila(&salida, subs);	   // Lo metemos a la salida
													subs[0] = 0;				   // Limpiamos la variable subs
												 	
												 }
												 
												next:								// Etiqueta next
												meterpila(&aux, k->dato); 			// Metemos el dato a la pila aux ya sea / o *
												subs[0] = 0;	 					// Limpiamos la variable subs
											}
											
											break;
										
										case 4:						// parentecis (
											meterpila(&aux, k->dato);			    // Lo metemos directo a la pila auxiliar
											
											break;
										case 5:					    // Parentecis )
											
											while(strcmp(aux->info, par[2]) != 0){ // Comparamos si es un (
												if(aux == NULL)					   // Si no se encuentra el ( y la pila auz esta vacia ya, no llevara a la etiqueta ERR (error)
													goto ERR;					
															
												subs[0] = 0;					   // Limpiamos la variable subs
												strcpy(subs, sacarpila(&aux));	   // Le asignamos a la variable 'subs' el valor primer valor de la pila aux y lo borramos de la pila
												meterpila(&salida, subs);          // Lo metemos a la salida
												
												if(strcmp(aux->info, par[2]) == 0){// Si el primer valor de la pila aux es igual a ( entonces
													sacarpila(&aux);			   // Lo sacamos y eliminamos de la pila
												break;							   // Terminamos el caso '5'
												}
											}
											
											break;
											
										default:
											break;
										
									}														
								}
									
								else{
									system("cls");
									ERR: 											// Etiqueta para los errores dentro del switch
									printf("Error en la linea %d cerca de %s\n", k->renglon, k->dato);
									goto B;											// Termina el programa
									
								}
	
						k=k->sig;									// Avanzamos al siguiente dato
						
							if(k->token == 9){						// Si es ; 
							system("cls");							// Limpiamos los errores que nos asignaron los pareas del caso si fuera string
							
								while(aux != NULL){					// Sacamos todos los valores que se encuentren en la pila aux 	
								strcpy(subs, sacarpila(&aux));		// Le asignamos a la variable 'subs' el valor primer valor de la pila aux y lo borramos de la pila
								meterpila(&salida, subs);			// Lo metemos a la salida
								subs[0] = 0;						// Limpiamos la variable subs
												 	
								}
								imprimirpila(salida); printf("\n");	// (Opcional) Imprimimos la pila de salida
							}
						}
						
						k=k->ant; 
						goto A;
						
						
					} 
					
					k=k->ant;
					
				   	goto B;
				    break;
				    
				case 317:													   //echo 
					k=k->sig;
					if(pareas(34) && pareas(308) && pareas(34) && pareas(9)){  //"STRING";
						k=k->ant;
						goto A;
					}		
					else
						goto B;	
				    break;

				    
				    
			}
			A:
			k=k->sig;

		}
printf("El codigo esta escrito de manera adecuada\n");
		
B:
system("pause");
}


