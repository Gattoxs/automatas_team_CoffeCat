#include<stdio.h>
#include<windows.h>
#include"Funciones.h"
#include"Ordenar.h"

main(){
	tipo lista=NULL;
	FILE *Archivo;
	char par[5][5], postf[50][100], subs[100]; subs[0] = 0;
	tipopila salida = NULL, aux = NULL;
	int i=0;
	for(i=0;i<50;i++)	postf[i][0] = '\0';	i=0;
	par[0][0] = 42; par[0][1] = 0; // * 
	par[1][0] = 47; par[1][1] = 0; // /
	par[2][0] = 40; par[2][1] = 0; // (
	par[3][0] = 41; par[3][1] = 0; // )
	
	// Opening the code source
	Archivo = fopen("source.c", "r");
	
	guardar(&lista, Archivo);

	k = lista;
	

	if(!ex){
		return 0;	
	}
				
		while(k != NULL){
			
			switch(k->token){

				case 53:      //Declaration of variable(s) INT, Float
			    case 52:
				    k=k->sig;  //Avanzamos al nombre 
					
					//TIPO variable
					if(parea(87)){ 
						checkvar:
						//Check if the variable it's available
						if(!decvarcmp(k->dato)){
							return error("This variable was declared before.");
						}
						k=k->sig;
						
						//TIPO Variable;
						if(parea(9)){
							goto A;
						}
						
						if(parea(26)){ // =
							
							k=k->sig;
							ExpMath(postf[ipa]);
							//printf("%s", k->dato); system("pause");
							if(parea(9)){
								goto A;
							}
							if(parea(10)){
								k=k->sig;
								goto checkvar;
							}else{
								return error("Valor de asignacion");
							}	
						}
				
						if(parea(10)){ // ,
							k=k->sig;
							goto checkvar;
						}
							
						//If the declaration its not equal to 'type var;' 'type var = exp;' 'type var1, var2,...,varn;' 	
						return error("A '=' or ',' was expected.");
					}else{
						return error("A variable name was expected");
					}
					
				    break;
				    
				case 51: //char
				    k=k->sig;  //Avanzamos al nombre 
					
					//TIPO variable
					if(parea(87)){ 
						checkcharvar:
						//Check if the variable it's available
						
						if(!decvarcmp(k->dato)){
							return error("This variable was declared before.");
						}
						k=k->sig;
						
						//TIPO Variable;
						if(parea(9)){
							goto A;
						}
						
						if(parea(26)){ // =
								k=k->sig;
								
							if(parea(12)){ //"
								k=k->sig;
								if(parea(88)){ // STRING
									k=k->sig;
									
									if(parea(12)){ // "
										k=k->sig;
										
										if(parea(9)){ // ;
											goto A;	
										}
										
										if(parea(10)){ // ,
											k=k->sig;
											goto checkcharvar;
										}else{
											return error("Syntax error on char declaration. Expected ';' or ',' ");
										}
									}
								}
							}
						}
						
						if(parea(10)){ //,
							k=k->sig;
							goto checkcharvar;
						}
						
					}else{
						return error("A variable name was expected");
					}
					
				break;
				
				case 87:
					
					if(!varcmp(k->dato)){ //check if the variable exist
						
						
						if(!decvarcmp(k->dato)){ //Check if the variable was declared before
							switch(vartype(k->dato)){ //Check variable type
								case 89: // STRING
									k=k->sig;
									if(parea(26)){ // =
										k=k->sig;
										if(parea(87)){
									
											if(!varcmp(k->dato)){
												if(vartype(k->dato) == 89){
													k=k->sig;
													if(parea(9)){
														goto A;
													}else{
														return error("Syntax error on char declaration. Expected ';'");
													}
												}else{
												return error("Unconpatible variable. Expected a variable type Char.");
												}
												
											}else{
												return error("Undeclared variable .");
											}
										}
										
										if(parea(12)){ //"
											k=k->sig;
											if(parea(88)){ // STRING
												k=k->sig;
												if(parea(12)){ // "
													k=k->sig;
													if(parea(9)){ // ;
														goto A;	
													}else{
														return error("Syntax error on char declaration. Expected ';'");
													}
												}
											}
										}
										
									}
									
								break;
								case 91:
								case 90: // Variable type INT FLOAT
									if(varcmp(k->dato) == 0 && vartype(k->dato) == 90 || vartype(k->dato) == 91){ //Verificate if the variable exist
										k=k->sig;
										
										if(parea(26)){ // =
											k = k->sig;
											ExpMath(postf[ipa]);
											
											if(parea(9)){ // ;
												goto A;
											}else{
												return error("Syntax error. Value not compatible or ';' ");
											}
										}else{
											if(parea(9)){ // ;
												goto A;
											}else{
												return error("Syntax error. Expeted ';' a");
											}
										}
									}else{
										
										return error("Undeclared variable Or Invalid type");
									}									
								break;
								
							}
						}else{
							return error("Undeclared variable.");
						}
					}else{
						return error("Undeclared variable.");
					}
					
				break;
				
				case 39:					
													// if
					k=k->sig;  //Avanzamos al parentesis
					
					if(pareas(4)){							  //If is a ( 
						
						If:									  // Label 'if' for cicle to repeat still the condition ends  
						
						ExpMath(postf[ipa]);				  //Calling the ExpMath function, return a string with 'postfija'
						//printf("%s\n", postf[ipa-1]); 
						//system("pause");
						if(k->token == 28 || k->token == 30 || k->token == 26 || k->token == 34 || k->token == 37){ //Logic Operators
							
							k=k->sig;						  // GetNextValue
							if(k->token == 26) pareas(26);    // ==
							if(k->token == 34) pareas(34);  // ||
							if(k->token == 37) pareas(37);  // &&
							
							goto If;						  //Go to lable 'If' because after a logic operator 'ahuevo' next an expMath
						}else																						//else Is not a logic operator
							if(k->token == 5){				  //Could it be a ) ? (To close the condition of the current if function)
								goto A;					      //then goto next value of the main list
							}else							  //Is not a ) ? so print error and terminate the program
								{
									return error("Syntax error for 'if' function. Expected ')' to close the condition");
								}		
							
					}else{									  // Is not a (? so print error and terminate the program
						return error("Syntax error for 'if' function. Expected '(' to open the condition");
					}
					
				break; 
				
				case 46:	// FOR
						k=k->sig;  //go to next token
					if(pareas(4)){ // (?
					// DECLARACION
						if(parea(9))
							goto confor;
							
						if(parea(87)){ 
							forcheckvar:
								
							//Check if the variable it's available
							if(varcmp(k->dato)){													//Check if the variable exist in the list
								if(!decvarcmp(k->dato)){											//Check if the variable was declared before
									if(vartype(k->dato) != 52 || vartype(k->dato) != 53 )			//Check if the type of the variable is numeric
										return error("Undeclared variable in 'for' function.");
								}else{
									return error("Undeclared variable.");
								}
								k=k->sig;
							}else{
								return error("Undeclared variable");
							}	
							
							
							//for(Variable;
							if(parea(9)){
								goto confor;
							}
							
							if(parea(26)){ // =
								k=k->sig;
								ExpMath(postf[ipa]);
								
								if(parea(10)) // ,
									goto forcheckvar;
								
								if(parea(9)){ // ;
									goto confor;
								}else{
									return error("Syntax error on declaration section of 'for' function.");
								}	
							}
					
							if(parea(10)){ // ,
								k=k->sig;
								goto forcheckvar;
							}else{
								return error("Syntax error on declaration section of 'for' function.");
							}			
							
						}else{
							return error("Syntax error on declaration section of 'for' function. Expected 'variable' or ';'");	
						}
							
							
					//CONDICION
						confor:
							
						if(parea(9))
							k=k->sig;
						else
							return error("Syntax error on 'for' funtcion");
							
							ConditionFor:						  // Label 'ConditionFor' for cicle to repeat still the condition ends  
					
							ExpMath(postf[ipa]);				  //Calling the ExpMath function, return a string with 'postfija'
						    //printf("%s\n",postf[ipa-1]); 
							//system("pause");	
							if(k->token == 28 || k->token == 30 || k->token == 26 || k->token == 34 || k->token == 37){ //Logic Operators
							
							k=k->sig;						  // GetNextValue
							if(k->token == 26) pareas(26);    // ==
							if(k->token == 34) pareas(34);    // ||
							if(k->token == 37) pareas(37);    // &&
								
								goto ConditionFor;						  //Go to lable 'ConditionFor' because after a logic operator 'ahuevo' next an expMath
							}else								  //else Is not a logic operator
								if(parea(9)){				          //Could it be a ; ? (To continue with the for statements)
					// OPERACION	
									k=k->sig;
									if(parea(87))
									{
										//Check if the variable it's available
										if(varcmp(k->dato)){													//Check if the variable exist in the list
											if(!decvarcmp(k->dato)){											//Check if the variable was declared before
												if(vartype(k->dato) != 52 || vartype(k->dato) != 53 )			//Check if the type of the variable is numeric
													return error("Only numeric variables can be used here.");
											}else{
												return error("Undeclared variable.");
											}
											k=k->sig;
										}else{
											return error("Undeclared variable");
										}
										
										if(parea(26)){
											k=k->sig;
											ExpMath(postf[ipa]);
										}										
									}
									
									if(parea(5)){ // if end with )
										goto A;
									}else{
										return error("Error in 'for' function. Expected ')' to close the parameters of the function.");
									}
																			
								}else{							      //Is a ; ?
										return error("Condition error on 'for' function. Expected logic operator or ';'");
								}
							
							
					}else{
						return error("Expected '(' for parameters of 'for' function");
					}
					
				break;    
				
				
				case 45:	 	// while
						k=k->sig;  //Avanzamos al parentesis
				if(pareas(4)){							  //If is a ( 
						
						iwhile:									  // Label 'if' for cicle to repeat still the condition ends  
						
						ExpMath(postf[ipa]);				  //Calling the ExpMath function, return a string with 'postfija'
						if(k->token == 28 || k->token == 30 || k->token == 26 || k->token == 34 || k->token == 37){ //Logic Operators
							
							k=k->sig;						  // GetNextValue
							if(k->token == 26) pareas(26);    // ==
							if(k->token == 34) pareas(34);  // ||
							if(k->token == 37) pareas(37);  // &&
							
							goto iwhile;						  //Go to lable 'If' because after a logic operator 'ahuevo' next an expMath
						}else																						//else Is not a logic operator
							if(k->token == 5){				  //Could it be a ) ? (To close the condition of the current if function)
								goto A;					      //then goto next value of the main list
							}else{							  //Is not a ) ? so print error and terminate the program
								return error("Syntax error for 'if' function. Expected ')' to close the condition");
							}		
							
				}else{									  // Is not a (? so print error and terminate the program
						return error("Syntax error for 'if' function. Expected '(' to open the condition");
				}
					
				break; 
				
			
				case 60:	                    //printf 
					k=k->sig;
					if(parea(4)){					//(
						k=k->sig;
						if(parea(34)){              // "
							k=k->sig;
							if(parea(88)){         //STRING
								k=k->sig;
								if(parea(34)){     // "
									k=k->sig;
									if(parea(5)){   // )
										k=k->sig;									
										if(parea(9)){  // ;
											goto A;
										}else return error("Syntax error in 'printf' function. Expected ';'");
									}else return error("Syntax error in 'printf' function. Expected ')' ");
								}else return error("Syntax error in 'printf' function. Expected '' ");
							}else return error("Syntax error in 'printf' function. Expected an String value'");
						}else return error("Syntax error in 'printf' function. Expected '' ");		
					}else return error("Syntax error in 'printf' function. Expected '(' ");	
				break;
			}
			A:
			k=k->sig;

		}
imprimir(&lista);
printf("El codigo esta escrito de manera adecuada\n");
		
B:
getchar();
}


