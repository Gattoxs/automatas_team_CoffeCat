#include<stdio.h>
#include<windows.h>


typedef struct {
  char carc[50];
  int token;
  }Asig_Tok;
  Asig_Tok atoken[]={
  	{"php", 257}, 
  	{"require_once", 258}, 
	{"require", 259}, 
	{"eval", 260}, 
	{"include_once", 261}, 
	{"include", 262}, 
	{"or", 263}, 
	{"xor", 264}, 
	{"and", 265}, 
	{"print", 266}, 
	{"yield", 267}, 
	{">", 1},
	{"<", 2},
	{"=", 3},
	{"(", 4},
	{")", 5},
	{"{", 6},
	{"}", 7},
	{":", 8},
	{";", 9},
	{"[", 10},
	{"]", 11},
	{"?", 12},
	{"!", 12},
	{">>=", 268}, 
	{"<<=", 269}, 
	{"^=", 270}, 
	{"|=", 271}, 
	{"&=", 272}, 
	{"%=", 273}, 
	{"CONCAEQUAL", 274}, 
	{"/=", 275}, 
	{"*=", 276}, 
	{"-=", 277}, 
	{"+=", 278}, 
	{"||", 279}, 
	{"&&", 280}, 
	{"!==", 281}, 
	{"===", 282}, 
	{"!=", 283}, 
	{"<>", 283},  
	{"==", 284}, 
	{">=", 285}, 
	{"<=", 286}, 
	{">>", 287}, 
	{"<<", 288}, 
	{"instanceof", 289}, 
	{"unset", 290}, 
	{"bool", 291}, 
	{"object", 292}, 
	{"array", 293}, 
	{"string", 294}, 
	{"double", 295}, 
	{"int", 296}, 
	{"--", 297}, 
	{"++", 298}, 
	{"clone", 299}, 
	{"new", 300}, 
	{"exit", 301}, 
	{"if", 302}, 
	{"elseif", 303}, 
	{"else", 304}, 
	{"endif", 305}, 
	{"1", 306},  
	{"2", 306},  
	{"3", 306},  
	{"4", 306},  
	{"5", 306},  
	{"6", 306},  
	{"7", 306},  
	{"8", 306},  
	{"9", 306},  
	{"0", 306}, 
	{"DNUMBER", 307}, 
	{"string", 308}, 
	{"${a", 309}, 
	{"VARIABLE", 310}, 
	{"num_string", 311}, 
	{"inline_html", 312}, 
	{"character", 313}, 
	{"BAD_CHARACTER", 314}, 
	{"ENCAPSED_AND_WHITESPACE", 315}, 
	{"CONSTANT_ENCAPSED_STRING", 316}, 
	{"echo", 317}, 
	{"do", 318}, 
	{"while", 319}, 
	{"endwhile", 320}, 
	{"for", 321}, 
	{"endfor", 322}, 
	{"foreach", 323}, 
	{"endforeach", 324}, 
	{"declare", 325}, 
	{"enddeclare", 326}, 
	{"as", 327}, 
	{"switch", 328}, 
	{"endswitch", 329}, 
	{"case", 330}, 
	{"default", 331}, 
	{"break", 332}, 
	{"continue", 333}, 
	{"goto", 334}, 
	{"function", 335}, 
	{"const", 336}, 
	{"return", 337}, 
	{"try", 338}, 
	{"catch", 339}, 
	{"finally", 340}, 
	{"throw", 341}, 
	{"use", 342}, 
	{"INSTEADOF", 343}, 
	{"global", 344}, 
	{"public", 345}, 
	{"protected", 346}, 
	{"private", 347}, 
	{"final", 348}, 
	{"abstract", 349}, 
	{"static", 350}, 
	{"var", 351}, 
	{"unset", 352}, 
	{"isset", 353}, 
	{"empty", 354}, 
	{"HALT_COMPILER", 355}, 
	{"class", 356}, 
	{"trait", 357}, 
	{"interface", 358}, 
	{"extends", 359}, 
	{"implements", 360}, 
	{"OBJECT_OPERATOR", 361}, 
	{"DOUBLE_ARROW", 362}, 
	{"LIST", 363}, 
	{"array", 364}, 
	{"callable", 365}, 
	{"class", 366}, 
	{"TRAIT_C", 367}, 
	{"METHOD_C", 368}, 
	{"FUNC_C", 369}, 
	{"line", 370}, 
	{"file", 371}, 
	{"comment", 372}, 
	{"DOC_COMMENT", 373}, 
	{"OPEN_TAG", 374}, 
	{"OPEN_TAG_WITH_ECHO", 375}, 
	{"CLOSE_TAG", 376}, 
	{"whitespace", 377}, 
	{"START_HEREDOC", 378}, 
	{"END_HEREDOC", 379}, 
	{"DOLLAR_OPEN_CURLY_BRACES", 380}, 
	{"CURLY_OPEN", 381}, 
	{"DOUBLE_COLON", 382}, 
	{"namespace", 383}, 
	{"NS_C", 384}, 
	{"dir", 385}, 
	{"NS_SEPARATOR", 386}
};

void imprimirTokens(){
	int i;
	for(i=0;i < 129;i++){
		printf("{%s, %d}\n",atoken[i].carc, atoken[i].token);
	}
}



//_______________________Estructura de las palabras________________________________________________//
struct milista
{
	int renglon;
	char dato[100];
	int token;
	struct milista *sig;
	struct milista *ant;
};

typedef struct milista nodo;
typedef nodo *tipo;
tipo k=NULL;


//_______________________	P	a	r	e	a ________________________________________________//

int pareas (int ntoken){
	if (ntoken==k->token){
		k=k->sig;
		return 1;
		
	}else{
		printf("Error en la linea [%d] cerca de %s\n", k->renglon, k->dato);
		//if(k-> token!=111)
		//	printf("------     token= %d \n",k->token);
	}
	return 0;
}


//______________________ Imprimir ___________________________//
void imprimir(tipo *lista){
	tipo p = *lista;
	while(p != NULL){
		printf("[%s, %d, %d]\n", p->dato, p->renglon, p->token);
		p=p->sig;
	}
}

//______________________ Imprimir Variables PHP____________________//
void imprimirVar(tipo *lista){
	tipo p = *lista;
	while(p != NULL){
		if(p->token == 309)
				printf("[%s%s, %d, %d]\n", p->dato,p->sig->dato, p->renglon, p->token);
			else {
				printf("");
				goto error;
			}
		p=p->sig;
	}
	if(0){
	error:
	system("cls");
	printf("(!)Se encontro un error, lo cual llevo a que el programa cerrara (!)\nLinea [%d], despues de %s", p->renglon, p->dato);
}
}


//____________________ Insertar ___________________________//

void insertar(tipo *lista, int x, char pala[100], int token){
	tipo n, p = *lista;
	n=(nodo *)malloc(sizeof(nodo));
	n->renglon = x+1;
	n->token = token;
	strcpy(n->dato, pala);
	n->sig = NULL;
	n->ant = NULL;
		if(*lista == NULL)
		*lista = n;
	else
		{
			while(p->sig != NULL)
				p=p->sig;
				p->sig = n;
				n->ant = p;
		}		
	
}
//____________________ Asignar token ____________________//

int AToken(char palabra[100]){
int x = 0;
	while(x < 128){
		//printf("\nPalabra: %s, palTOken: %s", palabra, atoken[x].carc);
		if(strcmp(atoken[x].carc, palabra) == 0){
			
			return atoken[x].token;
		}
		x = x + 1;
	}
	return 85;
}	

//______________________ Guardar ____________________//

void guardar(tipo *lista, FILE *Archivo, char res[118][20]){
	tipo n, p=*lista;
	char pala[100], a[100], z;
	int x,y, i=0;
	bool ex=true;
	
//printf("Archivo original: \n");	
//	while(!feof(Archivo)){
//		fputc(fgetc(Archivo), stdout);
//	}
//printf("\n\nSeparado en: \n");
rewind(Archivo);	
	x = fgetc(Archivo);
	pala[0] = 0;
	if(lista){
		while(!feof(Archivo))
		{ 
		back:
			
		//espacio
		if(x == 32){
			if(strlen(pala) > 1)
			insertar(&*lista, i, pala, AToken(pala));
			x = fgetc(Archivo);
			pala[0] = 0;
			goto back;
		}	
				
		//Salto de linea
		if(x == 10){
			if(strlen(pala) > 1)
			insertar(&*lista, i, pala, AToken(pala));
			i = i + 1;
			x = fgetc(Archivo);
			pala[0] = 0;
			goto back;
		}			
		//Tabulacion
		if(x == 9){
			
			if(strlen(pala) > 1)
			insertar(&*lista, i, pala, AToken(pala));
			x = fgetc(Archivo);
			pala[0] = 0;
			goto back;
		}		
		
		//Numeros
		if(x >= 48 && x <= 57){
			if(strlen(pala) > 1)
			insertar(&*lista, i, pala, AToken(pala));
			
			pala[0] = 0;
				z = x;
				a[0] = z;
				a[1] = 0;
				strcat(pala, a);
			x = fgetc(Archivo);
			while(x >= 48 && x <= 57){
				z = x;
				a[0] = z;
				a[1] = 0;
				strcat(pala, a);
				x = fgetc(Archivo);	
			}
			
			insertar(&*lista, i, pala, 306);
			pala[0] = 0;
			goto back;
		}		
		//Comillas
		if(x == 34){
			pala[0] = 34;
			insertar(&*lista, i, pala, 34);
			pala[0] = 0;
			x = fgetc(Archivo);
			while(x != 34){
				z = x;
				a[0] = z;
				a[1] = 0;
				strcat(pala, a);
				x = fgetc(Archivo);
			}
			insertar(&*lista, i, pala, 308);
			pala[0] = 0;
			z = x;
			a[0] = z;
			a[1] = 0;
			strcat(pala, a);
			insertar(&*lista, i, pala, 34);
			x = fgetc(Archivo);
			pala[0] = 0;
			goto back;
		}
		
		
		//Variable
		if(x == 36){
			z = x;
			a[0] = z;
			a[1] = 0;
			strcat(pala, a);
			y = 0;
			insertar(&*lista, i, pala, 309);
			pala[0] = 0;
			x = fgetc(Archivo);
			z = x;
			a[0] = z;
			a[1] = 0;
			if(x == 97 | x == 98 | x == 99 | x == 100 | x == 101 | x == 102 | x == 103 | x == 104 | x == 105 | x == 106 | x == 107 | x == 108 | x == 109 | x == 110 | x == 111 | x == 112 | x == 113 | x == 114 | x == 115 | x == 116 | x == 117 | x == 118 | x == 119 | x == 120 | x == 121 | x == 122 | x == 65 |x == 66 |x == 67 |x == 68 |x == 69 |x == 70 |x == 71 |x == 72 |x == 73 |x == 74 |x == 75 |x == 76 |x == 77 |x == 78 |x == 79 |x == 80 |x == 81 |x == 82 |x == 83 |x == 84 |x == 85 |x == 86 |x == 87 |x == 89 |x == 90)
			{
			while(x != 9 && x != 32 && x != 61 && x != 45 && x != 43 && x != 47 && x != 34 && x != 59  && x != 58  && x != 123  && x != 125  && x != 91  && x != 94  && x != 40){
				z = x;
				a[0] = z;
				a[1] = 0;
				strcat(pala, a);
				x = fgetc(Archivo);
			}	
			insertar(&*lista, i, pala, 310);
			pala[0] = 0;
			}
			
			goto back;
		}
			
		if(x != 10 && x != 32 && x != 34 && x != 36 && x != 9 ){	
			z = x;
			a[0] = z;
			a[1] = 0;
			strcat(pala, a);
			y = 0;
		while(y < 27){
				if(strcmp(pala, res[y]) == 0){
					insertar(&*lista, i, pala, AToken(pala));
					pala[0] = 0;
					goto next;
				}

			y = y + 1;
			
		}

		next:
		x = fgetc(Archivo);
		
		}	

   		}
	}
}


main(){
	
	tipo lista=NULL;
	FILE *Archivo, *Reservadas;
	char res[36][20] = {"?", "^", "'", "=", ">", "<", "(", ")",";", ":", ",", "[", "]", "{", "}", "+", "-", "*", "/", "!", "||", "&&", "!=", "==", ">=", "<=", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
	int i=0;
	
	//printf("\n\n\n TOKENS\n__________________________\n");

	Reservadas = fopen("palabras reservadas.txt", "r");
	//Reservadas_As_Array(Reservadas);
	Archivo = fopen("BD.php", "r");
	guardar(&lista, Archivo, res);
	k = lista;
    //printf("\n\n__________________________\n");
	//imprimir(&lista);
	//if(k == NULL)
	//printf("NULA\n\n");
				
		while(k != NULL){
			switch(k->token){
		
				case 309:														//$
					k=k->sig;
					if(pareas(310) && pareas(9)){								//var;
						k=k->ant;
						goto A;
					}		
					else
						goto B;	
				    break;
				    
				case 317:													   //echo 
					k=k->sig;
					if(pareas(34) && pareas(308) && pareas(34) && pareas(9)){  //"STRING";
						k=k->ant;
						goto A;
					}		
					else
						goto B;	
				    break;
			}
			A:
			k=k->sig;
		}
printf("El codigo esta escrito de manera adecuada\n");
		
B:
system("pause");
}



