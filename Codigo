#include<stdio.h>
#include<windows.h>
#include"Funciones.h"
#include"Ordenar.h"


//_______________________	P	a	r	e	a ________________________________________________//

int pareas (int ntoken){
	if (ntoken==k->token){
		k=k->sig;
		return 1;
		
	}else{
		printf("Error en la linea [%d] cerca de %s\n", k->renglon, k->dato);
		//if(k-> token!=111)
		//	printf("------     token= %d \n",k->token);
	}
	return 0;
}


//______________________ Imprimir Variables PHP____________________//
void imprimirVar(tipo *lista){
	tipo p = *lista;
	while(p != NULL){
		if(p->token == 309)
				printf("[%s%s, %d, %d]\n", p->dato,p->sig->dato, p->renglon, p->token);
			else {
				printf("");
				goto error;
			}
		p=p->sig;
	}
	if(0){
	error:
	system("cls");
	printf("(!)Se encontro un error, lo cual llevo a que el programa cerrara (!)\nLinea [%d], despues de %s", p->renglon, p->dato);
}
}

main(){
	
	tipo lista=NULL;
	FILE *Archivo, *Reservadas;
	char res[36][20] = {"?", "^", "'", "=", ">", "<", "(", ")",";", ":", ",", "[", "]", "{", "}", "+", "-", "*", "/", "!", "||", "&&", "!=", "==", ">=", "<=", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
	char subs[100];
	subs[0] = 0;
	int i=0;
	tipopila salida = NULL, aux = NULL;
	char par[5][5], postf[50][100];
	for(;i<50;i++)
	postf[i][0] = '\0';	
	i=0;
	par[0][0] = 42; par[0][1] = 0; // * 
	par[1][0] = 47; par[1][1] = 0; // /
	par[2][0] = 40; par[2][1] = 0; // (
	par[3][0] = 41; par[3][1] = 0; // )
	
	Reservadas = fopen("palabras reservadas.txt", "r");
	Archivo = fopen("BD.php", "r");
	guardar(&lista, Archivo, res);
	k = lista;
	

	if(ex == false){
		
		return 0;
	}
				
		while(k != NULL){
			
			switch(k->token){

				case 309:      //Al momento de encontrar una variable '$'	
			        k=k->sig;  //Avanzamos al nombre 
					
					//$var;
					if(pareas(310) && pareas(9)){ k=k->ant; goto A;} k=k->ant;
					system("cls");
					
					//$var = "String" || $var = ExpMath;
					if(pareas(310) && pareas(3)){ 
			 
						if(pareas(34)){ //$var = "String"
							if(pareas(308) && pareas(34) && pareas(9))
								goto A;
							else
								goto B;
						}else{
							ExpMath(postf[ipa]);
								
						}
						system("cls");	
								
						
						
						
						
						k=k->ant; 
						goto A;
						
						
					} 
					
					k=k->ant;
					
				   	goto B;
				    break;
				
				
				case 302:					
													// if
					k=k->sig;  //Avanzamos al parentesis
					
					if(pareas(4)){							  //If is a ( 
						
						If:									  // Label 'if' for cicle to repeat still the condition ends  
						
						ExpMath(postf[ipa]);				  //Calling the ExpMath function, return a string with 'postfija'
						//printf("%s\n", postf[ipa-1]); 
						//system("pause");
						if(k->token == 1 || k->token == 2 || k->token == 3 || k->token == 279 || k->token == 280){ //Logic Operators
							
							k=k->sig;						  // GetNextValue
							if(k->token == 3)   pareas(3);    // ==
							if(k->token == 279) pareas(279);  // ||
							if(k->token == 280) pareas(280);  // &&
							
							goto If;						  //Go to lable 'If' because after a logic operator 'ahuevo' next an expMath
						}else																						//else Is not a logic operator
							if(k->token == 5){				  //Could it be a ) ? (To close tue condition of the current if function)
								goto A;					      //then goto next value of the main list
							}else							  //Is not a ) ? so print error and terminate the program
								{
									printf("ERROR");
									goto B;
								}		
							
					}else{									  // Is not a (? so print error and terminate the program
						printf("Error");
						goto B;
					}
					
				break; 
				
				case 321:														// for
						k=k->sig;  //Avanzamos al parentesis
					if(pareas(4)){
			// DECLARACION
						if(k->token == 309){
							k=k->sig;
							if(k->token == 310){
								k=k->sig;
								if(k->token == 3){
									k = k->sig;
									ExpMath(postf[ipa]);
									printf("%s\n", postf[ipa-1]); 
							    	system("pause");
							    	
									if(k->token == 9){
								
										goto confor;
									}
										
									else{
									
										goto B;
									}
									
								}else{
									if(k->token == 9){
											
								goto confor;
									}
									
										
									else{
					
										goto B;
									}
										
								}
								
								
							}else{
								
								goto B;
							}
							
							
							
						}else{
			//CONDICION
							confor:
									
							pareas(9);
							
								ConditionFor:									  // Label 'ConditionFor' for cicle to repeat still the condition ends  
						
								ExpMath(postf[ipa]);				  //Calling the ExpMath function, return a string with 'postfija'
							    //printf("%s\n",postf[ipa-1]); 
								//system("pause");	
								if(k->token == 1 || k->token == 2 || k->token == 3 || k->token == 279 || k->token == 280){ //Logic Operators
									
									k=k->sig;						  // GetNextValue
									if(k->token == 3)   pareas(3);    // ==
									if(k->token == 279) pareas(279);  // ||
									if(k->token == 280) pareas(280);  // &&
									
									goto ConditionFor;						  //Go to lable 'ConditionFor' because after a logic operator 'ahuevo' next an expMath
								}else								  //else Is not a logic operator
									if(pareas(9)){				          //Could it be a ; ? (To continue with the for statements)
			// OPERACION
										if(pareas(309) && pareas (310) && pareas(5)) // $var)
										{
											k=k->ant;
											goto A;
										}
										
										k=k->ant;k=k->ant;k=k->ant;
										if(pareas(309) && pareas (310) && pareas(3)) // $var = expmath) 
											{
												ExpMath(postf[ipa]);
												if(pareas(5)){
													k=k->ant;
													goto A;
												}
												else
													goto B;
											}
											
										k=k->ant;k=k->ant;k=k->ant;
										if(pareas(5)){                            // ;) Without increment
											k=k->ant;
											goto A;
										}
										else
											goto B;												
										
										
									}else							      //Is not a ) ? so print error and terminate the program
										{
											printf("\nERROR");
											goto B;
										}
							
							
						}
						
					}else{
						printf("Error");
					}
					
				break;    
				
				case 319:														// while
						k=k->sig;  //Avanzamos al parentesis
					if(pareas(4)){
							iWhile:							  // Label 'iWhile' for cicle to repeat still the condition ends  
						
						ExpMath(postf[ipa]);				  //Calling the ExpMath function, return a string with 'postfija' 
						if(k->token == 1 || k->token == 2 || k->token == 3 || k->token == 279 || k->token == 280){ //Logic Operators
							
							k=k->sig;						  // GetNextValue
							if(k->token == 3)   pareas(3);    // ==
							if(k->token == 279) pareas(279);  // ||
							if(k->token == 280) pareas(280);  // &&
							
							goto iWhile;				      //Go to lable 'iWhile' because after a logic operator 'ahuevo' next an expMath
						}else																						//else Is not a logic operator
							if(k->token == 5){				  //Could it be a ) ? (To close tue condition of the current if function)
								goto A;						  //then goto next value of the main list
							}else							  //Is not a ) ? so print error and terminate the program
								{
									printf("ERROR");
									goto B;
								}
						
					}else{
						printf("Error");
					}
					
				break; 
				
			
				

				
				case 317:													   //echo 
					k=k->sig;
					if(pareas(34) && pareas(308) && pareas(34) && pareas(9)){  //"STRING";
						k=k->ant;
						goto A;
					}		
					else
						goto B;	
				    break;

				    
				    
			}
			A:
			k=k->sig;

		}
imprimir(&lista);
//printf("El codigo esta escrito de manera adecuada\n");
		
B:
system("pause");
}


